- hosts: masters
  become: yes
  vars:
    kube_network_cidr: "10.244.0.0/16"  # CIDR per Flannel
    apiserver_address: "172.31.177.20"  # Indirizzo IP del master
    flannel_manifest_url: "https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"

  tasks:
    # Verifica se kubeadm è già stato inizializzato
    - name: Check if kubeadm init has already been run
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_init_done

    # Inizializza il cluster Kubernetes se non è già stato fatto
    - name: Initialize K8S cluster
      shell: kubeadm init --pod-network-cidr={{ kube_network_cidr }} --apiserver-advertise-address={{ apiserver_address }}
      when: not kubeadm_init_done.stat.exists

    # Configura il file di accesso per kubectl
    - name: Configure kubectl for root user
      file:
        path: /root/.kube
        state: directory
        mode: 0755
    - name: Copy admin.conf to kubectl config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes

    # Verifica la connettività di kubectl
    - name: Check kubectl connectivity
      command: kubectl cluster-info
      register: cluster_check
      retries: 3
      delay: 5
      failed_when: "'is running' not in cluster_check.stdout"
      changed_when: false

    # Scarica il manifesto di Flannel
    - name: Download Flannel manifest
      ansible.builtin.get_url:
        url: "{{ flannel_manifest_url }}"
        dest: /tmp/kube-flannel.yml
      register: download_result
      retries: 3
      delay: 10  # Tempo di attesa (in secondi) tra un tentativo e l'altro
      until: download_result is succeeded
      ignore_errors: yes
      


    # Applica la rete Flannel
    - name: Install Pod network (Flannel)
      command: kubectl apply -f /tmp/kube-flannel.yml
      register: flannel_apply
      retries: 5
      delay: 10
      until: flannel_apply.rc == 0
      changed_when: flannel_apply.rc == 0
      failed_when: flannel_apply.rc != 0

    # Controlla lo stato dei pod Flannel
    - name: Check Flannel pods status
      shell: kubectl get pods -n kube-system -l app=flannel --no-headers | awk '{ print $3 }' | grep -v Running
      register: flannel_status
      retries: 5
      delay: 15
      failed_when: flannel_status.stdout != ""
      changed_when: false

    # Attendi che il nodo master sia pronto
    - name: Wait for master node to be ready
      shell: kubectl get nodes {{ inventory_hostname }} --no-headers | awk '{ print $2 }'
      register: node_status
      retries: 9
      delay: 10
      until: node_status.stdout == "Ready"
      ignore_errors: true
      failed_when: node_status.stdout != "Ready"
      changed_when: false

    # Riavvia kubelet se il nodo non è pronto
    - name: Restart kubelet if node is not ready
      systemd:
        name: kubelet
        state: restarted
        enabled: yes
      when: node_status.stdout != "Ready"

    # Scarica Helm
    - name: Download Helm binary
      get_url:
        url: "https://get.helm.sh/helm-v3.13.0-linux-amd64.tar.gz"
        dest: /tmp/helm-v3.13.0-linux-amd64.tar.gz

    # Estrai Helm
    - name: Extract Helm binary
      shell: tar -xvf /tmp/helm-v3.13.0-linux-amd64.tar.gz -C /tmp
      args:
        creates: /tmp/linux-amd64/helm

    # Sposta Helm in /usr/local/bin
    - name: Move Helm binary to /usr/local/bin
      copy:
        src: /tmp/linux-amd64/helm
        dest: /usr/local/bin/helm
        remote_src: yes
        mode: '0755'

    # Verifica installazione Helm
    - name: Verify Helm installation
      command: helm version
      register: helm_version
    - debug:
        msg: "Helm installed successfully: {{ helm_version.stdout }}"


    # Scarica il file tar di Kube-Bench
    - name: Download Kube-Bench tar file
      shell: curl -L https://github.com/aquasecurity/kube-bench/releases/download/v0.6.2/kube-bench_0.6.2_linux_amd64.tar.gz -o /tmp/kube-bench_0.6.2_linux_amd64.tar.gz

    # Estrai il file tar di Kube-Bench
    - name: Extract Kube-Bench tar file
      shell: tar -xvf /tmp/kube-bench_0.6.2_linux_amd64.tar.gz -C /tmp
      args:
        creates: /tmp/kube-bench

    # Esegui Kube-Bench
    - name: Run Kube-Bench
      shell: |
        /tmp/kube-bench --config-dir /tmp/cfg --config /tmp/cfg/config.yaml
      register: kube_bench_result
      ignore_errors: true

    # Mostra i risultati di Kube-Bench
    - name: Output Kube-Bench results
      debug:
        var: kube_bench_result.stdout


- hosts: kubernetes_nodes
  become: yes
  vars:
    apiserver_address: "172.25.112.200"  # Indirizzo del Master

  tasks:
    # Aggiungi il nodo al cluster
    - name: Join node to cluster
      shell: kubeadm join {{ apiserver_address }} --token {{ token }} --discovery-token-ca-cert-hash sha256:{{ ca_hash }}
      when: inventory_hostname != "master.example.com"