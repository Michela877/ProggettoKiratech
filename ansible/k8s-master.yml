- hosts: masters
  become: yes
  tasks:
    # Verifica se kubeadm init è già stato eseguito
    - name: Check if kubeadm init has already been run
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_init_done

    # Verifica se il nodo è attivo usando il ping Ansible
    - name: Ping the node to verify it's active
      ping:
      register: ping_result
      ignore_errors: true

    # Attiva il nodo se il ping non ha avuto successo
    - name: Start node if not active
      systemd:
        name: "kubelet"
        state: started
        enabled: yes
      when: ping_result.failed

    # Inizializza il cluster Kubernetes solo se non è stato già fatto
    - name: Initialize K8S cluster
      shell: kubeadm init --pod-network-cidr=172.16.0.0/16 --apiserver-advertise-address=172.25.118.52
      when: not kubeadm_init_done.stat.exists

    # Crea la directory .kube solo se non esiste
    - name: Create .kube directory
      file:
        path: /root/.kube
        state: directory
        mode: 0755

    # Copia il file admin.conf nella configurazione utente di kube
    - name: Copy admin.conf to user kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
      when: not ansible_facts.k8s_cluster_initialized is defined

    # Verifica se il plugin CNI è stato correttamente applicato
    - name: Check if CNI plugin is installed
      command: ls /etc/cni/net.d
      register: cni_check
      ignore_errors: true

    # Se il plugin CNI non è installato, applica un plugin di rete (Flannel, Calico, ecc.)
    - name: Apply CNI plugin if not installed
      shell: |
        curl -L https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml | kubectl apply -f -
      when: cni_check.failed

    # Verifica lo stato di readiness del nodo
    - name: Wait for node to be ready (timeout 30 seconds)
      command: kubectl get nodes {{ inventory_hostname }} --no-headers | awk '{ print $2 }'
      register: node_status
      retries: 3  # Prova fino a 3 volte
      delay: 10   # Ogni tentativo aspetta 10 secondi
      until: node_status.stdout == "Ready"
      ignore_errors: true

    # Se il nodo non è pronto, riavvia il nodo
    - name: Restart kubelet service if node is not ready
      systemd:
        name: kubelet
        state: restarted
        enabled: yes
      when: node_status.stdout != "Ready"


    # Scarica il file tar di Kube-Bench
    - name: Download Kube-Bench tar file
      shell: curl -L https://github.com/aquasecurity/kube-bench/releases/download/v0.6.2/kube-bench_0.6.2_linux_amd64.tar.gz -o /tmp/kube-bench_0.6.2_linux_amd64.tar.gz

    # Estrai il file tar di Kube-Bench
    - name: Extract Kube-Bench tar file
      shell: tar -xvf /tmp/kube-bench_0.6.2_linux_amd64.tar.gz -C /tmp
      args:
        creates: /tmp/kube-bench

    # Esegui Kube-Bench
    - name: Run Kube-Bench
      shell: |
        /tmp/kube-bench --config-dir /tmp/cfg --config /tmp/cfg/config.yaml
      register: kube_bench_result
      ignore_errors: true

    # Mostra i risultati di Kube-Bench
    - name: Output Kube-Bench results
      debug:
        var: kube_bench_result.stdout
        