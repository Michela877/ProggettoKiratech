stages:
  - powershell
  - ssh
  - git-clone
  - ansible


variables:
  TF_INPUT: false
  POWERSHELL_SCRIPT_PATH: "C:/GitLab-Runner/builds/t3_x3dcaD/0/gestionale90/automazione/powershell/vmhyperv.ps1"  # modifica il percorso 
  ANSIBLE_REPO_PATH: "/home/gitlab-runner/workspace/automazione/ansible"

powershell:
  stage: powershell
  script:
    # Esegui lo script PowerShell per creare le VM Hyper-V
    - echo "Esecuzione dello script PowerShell per creare le VM"
    - powershell.exe -ExecutionPolicy Bypass -File $env:POWERSHELL_SCRIPT_PATH  # Assicurati che il percorso sia corretto
  tags:
    - windows


git-clone:
  stage: git-clone
  script:
    # Clona il repository Git nella cartella 'workspace'
    - echo "Verifica se la cartella esiste già"
    - if [ -d "/home/gitlab-runner/workspace/automazione" ]; then rm -rf /home/gitlab-runner/workspace/automazione; fi  # Rimuove la cartella se esiste
    - echo "Clonazione del repository Git"
    - git clone https://gitlab.com/gestionale90/automazione.git /home/gitlab-runner/workspace/automazione
  tags:
    - centos9  # Specifica il tag del runner per Linux



setup-ssh:
  stage: ssh
  script:
    # Configura SSH per gitlab-runner se non è già configurato
    - echo "Configurazione SSH per gitlab-runner"
    
    # Verifica se la chiave SSH esiste, se no la crea
    - |
      if [ ! -f /home/gitlab-runner/.ssh/id_rsa ]; then
        echo "Chiave SSH non trovata. Creazione della chiave SSH per gitlab-runner."
        sudo -u gitlab-runner ssh-keygen -t rsa -b 2048 -f /home/gitlab-runner/.ssh/id_rsa -N ""
      else
        echo "Chiave SSH già presente, nessuna azione necessaria."
      fi

    # Verifica se la chiave pubblica è già stata aggiunta ai nodi remoti
    - |
      for host in "master.example.com" "nodeone.example.com" "nodetwo.example.com"; do
        if ! sudo -u gitlab-runner ssh -o StrictHostKeyChecking=no -q $host exit; then
          echo "Chiave pubblica SSH non trovata su $host, aggiungendo la chiave pubblica."
          sudo -u gitlab-runner ssh-copy-id -i /home/gitlab-runner/.ssh/id_rsa.pub $host
        else
          echo "Chiave pubblica SSH già presente su $host."
        fi
      done

    # Aggiungi l'host alla lista known_hosts se non è presente
    - echo "Aggiunta degli host a known_hosts"
    - |
      for host in "master.example.com" "nodeone.example.com" "nodetwo.example.com"; do
        sudo -u gitlab-runner ssh-keyscan -H $host >> /home/gitlab-runner/.ssh/known_hosts
      done

    # Impostazioni di permessi per la cartella .ssh
    - sudo chmod 700 /home/gitlab-runner/.ssh
    - sudo chmod 600 /home/gitlab-runner/.ssh/id_rsa
    - sudo chmod 644 /home/gitlab-runner/.ssh/id_rsa.pub
    - sudo chmod 644 /home/gitlab-runner/.ssh/known_hosts

  tags:
    - centos9  # Specifica il tag del runner per Linux



ansible:
  stage: ansible
  script:
    # Esegui Ansible per eseguire i file .yml in ordine
    - echo "Verifica dei file di configurazione SSH"
    - cat ~/.ssh/known_hosts
    - cat ~/.ssh/config || echo "Config file non trovato"
    - ssh -T git@github.com  # Verifica connessione SSH al server
    - echo "Esecuzione di Ansible"
    - ansible-playbook -i /home/gitlab-runner/workspace/automazione/ansible/hosts $ANSIBLE_REPO_PATH/k8s-pkg.yml  # Esegui il primo file
    - ansible-playbook -i /home/gitlab-runner/workspace/automazione/ansible/hosts $ANSIBLE_REPO_PATH/k8s-master.yml  # Esegui il secondo file
    - ansible-playbook -i /home/gitlab-runner/workspace/automazione/ansible/hosts $ANSIBLE_REPO_PATH/k8s-workers.yml  # Esegui il terzo file
    - ansible-playbook -i /home/gitlab-runner/workspace/automazione/ansible/hosts $ANSIBLE_REPO_PATH/k8s-deployment.yml  # Esegui il quarto file
  tags:
    - centos9  # Specifica il tag del runner per Linux (assumendo che il runner Ansible sia Linux)