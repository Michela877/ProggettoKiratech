stages:
  - powershell
  - dipendenze
  - ssh-setup
  - ansible

powershell:
  stage: powershell
  script:
    # Esegui lo script PowerShell per creare le VM Hyper-V
    - echo "Esecuzione dello script PowerShell per creare le VM"
    - powershell.exe -ExecutionPolicy Bypass -File $env:POWERSHELL_SCRIPT_PATH
  tags:
    - windows


dipendenze:
  stage: dipendenze
  script:
    - sudo yum install -y epel-release
    - sudo yum install -y git
    - sudo yum install -y ansible
    - sudo yum install -y sshpass
  tags:
    - centos9

ssh-setup:
  stage: ssh-setup
  script:
    # Verifica se la chiave SSH esiste, altrimenti la crea
    - echo "Verificando se la chiave SSH esiste"
    - |
      if [ ! -f $SSH_KEY_PATH ]; then
        echo "Generando la chiave SSH"
        ssh-keygen -t rsa -b 4096 -f $SSH_KEY_PATH -N ""
      else
        echo "Chiave SSH giÃ  esistente. Procedo."
      fi

    # Esporta la variabile SSH_PASS per garantire che venga utilizzata correttamente
    - export SSH_PASS="$SSH_PASS"
    # Copia la chiave pubblica sui nodi
    - echo "Copiando la chiave SSH su master.example.com"
    - sshpass -p "$SSH_PASS" ssh-copy-id -o StrictHostKeyChecking=no -i $SSH_KEY_PATH.pub root@master.example.com
    
    - echo "Copiando la chiave SSH su nodeone.example.com"
    - sshpass -p "$SSH_PASS" ssh-copy-id -o StrictHostKeyChecking=no -i $SSH_KEY_PATH.pub root@nodeone.example.com
    
    - echo "Copiando la chiave SSH su nodetwo.example.com"
    - sshpass -p "$SSH_PASS" ssh-copy-id -o StrictHostKeyChecking=no -i $SSH_KEY_PATH.pub root@nodetwo.example.com

    # Configura il file ~/.ssh/config per il login senza password
    - echo "Configurando il file SSH config"
    - mkdir -p /home/gitlab-runner/.ssh
    - echo "Host master.example.com" > $SSH_CONFIG_PATH
    - echo "    User root" >> $SSH_CONFIG_PATH
    - echo "    IdentityFile $SSH_KEY_PATH" >> $SSH_CONFIG_PATH
    - echo "Host nodeone.example.com" >> $SSH_CONFIG_PATH
    - echo "    User root" >> $SSH_CONFIG_PATH
    - echo "    IdentityFile $SSH_KEY_PATH" >> $SSH_CONFIG_PATH
    - echo "Host nodetwo.example.com" >> $SSH_CONFIG_PATH
    - echo "    User root" >> $SSH_CONFIG_PATH
    - echo "    IdentityFile $SSH_KEY_PATH" >> $SSH_CONFIG_PATH

    # Imposta i permessi corretti per la cartella .ssh e il file config
    - chmod 700 /home/gitlab-runner/.ssh
    - chmod 600 $SSH_CONFIG_PATH

    # Verifica la connessione SSH
    - echo "Testando la connessione SSH"
    - ssh -o StrictHostKeyChecking=no root@master.example.com "echo 'Connessione SSH a master.example.com riuscita!'"
    - ssh -o StrictHostKeyChecking=no root@nodeone.example.com "echo 'Connessione SSH a nodeone.example.com riuscita!'"
    - ssh -o StrictHostKeyChecking=no root@nodetwo.example.com "echo 'Connessione SSH a nodetwo.example.com riuscita!'"

  tags:
    - centos9  # Assicurati che il runner GitLab sia configurato con il tag centos9 per questo job

ansible:
  stage: ansible
  script:
    - |
      if [ ! -f "$ANSIBLE_INVENTORY" ]; then 
        echo "File di inventario non trovato: $ANSIBLE_INVENTORY"
        exit 1
      fi
    - echo "Esecuzione di Ansible"
    - ansible-playbook -i $ANSIBLE_INVENTORY $ANSIBLE_PLAYBOOK_PATH/k8s-pkg.yml
    - ansible-playbook -i $ANSIBLE_INVENTORY $ANSIBLE_PLAYBOOK_PATH/k8s-master.yml
    - ansible-playbook -i $ANSIBLE_INVENTORY $ANSIBLE_PLAYBOOK_PATH/k8s-workers.yml
    - ansible-playbook -i $ANSIBLE_INVENTORY $ANSIBLE_PLAYBOOK_PATH/k8s-deployment.yml
  tags:
    - centos9